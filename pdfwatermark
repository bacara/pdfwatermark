#!/bin/bash
#
# pdfwatermark - Watermark PDF documents - https://www.github.com/bacara/pdfwatermark
# Copyright (c) [2020] Christophe Bacara
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

#
# global variables
#

# options array
declare -A opts
opts[wd.path]=""             # working directory
opts[wm.fn]=""               # watermark filename
opts[wm.opacity]=10          # default watermark opacity
opts[fl.preserve]=false      # preserve intermediate files
opts[fl.force]=false         # force overwrite
opts[fl.verbose]=false       # verbose mode

# input/output files arrays
infiles=()
outfiles=()

# misc
BASENAME="$(basename $0)"

#
# utilities
#

function debug () {
    echo "$@"
    set +x
    $@
    set -x
}

function fatal_error () {
    echo -e "${BASENAME}: $1" 1>&2
    exit 1
}

function error () {
    echo -e "${BASENAME}: $1" 1>&2
}

function help () {
    echo "Usage: ${BASENAME} [OPTION]... <WATERMARK> <FILE>..."
    echo "Watermark your PDF documents"
    echo ""
    #    |< ------------------------ 80-characters string in here ----------------------->|
    echo "Mandatory arguments to long options are mandatory for short options too."
    echo "  -d, --directory DIR       set DIR instead of /tmp/pdfwatermark.<mktemp> as"
    echo "                              working directory (implies --keep-files)"
    echo "  -D, --force-dir DIR       as -d, but force creation of DIR if is doesn't exist"
    echo "  -f, --force               do not ask for overwrite confirmation"
    echo "  -k, --keep-files          keep intermediate files instead of deleting them"
    echo "      --opacity N           set watermark inclusion opacity to N (0-100)"
    echo "  -v, --verbose             be verbose"
    echo "  --help                    display this help and exit"
    #    |< ------------------------ 80-characters string in here ----------------------->|
    echo ""
    echo "Full documentation <https://www.github.com/bacara/pdfwatermark>"
}

function usage () {
    echo "Usage: ${BASENAME} [OPTION]... <WATERMARK> <FILE>..."
    echo "Use --help to display more help"
}

#
# functions
#

function pdfwatermark () {
    # $1: watermark filename
    # $2: input filename
    # $3: output filename

    WM_FN="$1"
    DOC_FN="$2"
    OUT_FN="$3"

    TMP="$(mktemp -u XXXXX)"
    FN_NE="${DOC_FN%.*}"  # remove extension from filename
    FILEPATH_NE="${opts[wd.path]}${FN_NE}.${TMP}" # append filename and tmp to workdir

    # colorize external programs' output foreground color
    echo -ne "\e[33m"

    # this is where the magic begins
    if ${opts[fl.verbose]}; then
        echo -e "\e[39msplitting ${DOC_FN} into images...\e[33m"
    fi

    convert -alpha off -density 300 "${DOC_FN}" "${FILEPATH_NE}.png"

    if ${opts[fl.verbose]}; then
        echo -e "\e[39mbuilding watermarked images...\e[33m"
    fi

    for page in ${FILEPATH_NE}*.png
    do
        composite -watermark ${opts[wm.opacity]} -gravity center "${WM_FN}" "${page}" "${page%.*}-watermarked.png"
    done

    if ${opts[fl.verbose]}; then
        echo -e "\e[39mbuilding final pdf...\e[33m"
    fi

    convert "${FILEPATH_NE}*-watermarked.png" "${OUT_FN}"
    # and this is where the magic ends

    # reset foreground
    echo -ne "\e[39m"
}

#
# main routine
#

function parse_options () {
    while (( $# )); do
        case "$1" in
            # working directory
            -d|--directory)
                # check existence
                if [[ ! -d "$2" ]]; then
                    fatal_error "no such directory: $2"
                fi
                opts[wd.path]="$2"
                opts[fl.preserve]=true
                shift 2
                ;;

            # force working directory
            -D|--create-directory)
                # create if absent
                if [[ ! -d "$2" ]]; then
                    mkdir "$2" || fatal_error "couldn't create directory: $2"
                fi
                opts[wd.path]="$2"
                opts[fl.preserve]=true
                shift 2
                ;;

            # force overwrite
            -f|--force)
                opts[fl.force]=true
                shift
                ;;

            # preserve intermediary files
            -k|--keep-files)
                opts[fl.preserve]=true
                shift
                ;;

            # watermarking opacity
            --opacity)
                if ! [[ $2 =~ ^[0-9]+$ ]]; then
                    fatal_error "not a valid integer: $2"
                fi

                if [[ $2 -lt 1 ]] || [[ $2 -gt 100 ]]; then
                    fatal_error "--opacity option requires an integer between 0 and 100"
                fi

                opts[wm.opacity]=$2
                shift 2
                ;;

            # verbose mode
            -v|--verbose)
                opts[fl.verbose]=true
                shift
                ;;

            # display help
            --help)
                help
                exit 0
                ;;

            # unknown option
            -*|--*)
                error "unknown option $1" >&2
                usage
                exit 1
                ;;

            # preserve positional arguments
            *)
                __PARAMS="$__PARAMS $1"
                shift
                ;;
        esac
    done
}

function parse_args () {
    # check we have watermark and at least one document
    if [[ $# -lt 2 ]]; then
        error "not enough arguments"
        usage
        exit 1
    fi

    # check if watermark exists
    if [[ ! -f "$1" ]]; then
        fatal_error "no such file: $1"
    else
        opts[wm.fn]="$1"
        shift
    fi

    # retrieve input files
    while (( $# )); do
        if [[ ! -f "$1" ]]; then
            fatal_error "no such file: $1"
        elif ! [[ ${1##\.} =~ pdf ]]; then
            fatal_error "not a pdf: $1"
        else
            infile="$1"
        fi

        # build output filename
        base="$(basename $1)"
        outfile="${base%.*}-watermarked.pdf"

        # check if output file exists
        if ! ${opts[fl.force]} && [[ -f "${outfile}" ]]; then
            read -n 1 -p "${outfile} already exists, overwrite? [y/N] " answer
            echo # acknowledge answer
            case $answer in
                [Yy]) ;;
                *)
                    exit 1
                    ;;
            esac
        fi

        infiles+=("$infile")
        outfiles+=("$outfile")
        shift
    done

    # create temp directory if no working directory provided
    if [[ -z "${opts[wd.path]}" ]]; then
        opts[wd.path]="$(mktemp -p /tmp -d pdfwatermark.XXXXX)"
    fi

    # add trailing slash to working directory if needed
    [[ "${opts[wd.path]}" != */ ]] && opts[wd.path]="${opts[wd.path]}/"
}

function cleanup () {
    # remove working directory
    if ! ${opts[fl.preserve]}; then
        rm -rf ${opts[wd.path]}
    fi
}

function main () {
    __PARAMS=""

    parse_options $@
    eval set -- "$__PARAMS"
    parse_args $@

    # do your job
    for i in ${!infiles[*]}; do
        pdfwatermark "${opts[wm.fn]}" "${infiles[$i]}" "${outfiles[$i]}"
    done

    cleanup
}

# main routine
main $@
